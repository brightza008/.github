name: Template Workflow Nodejs.

on:
  push:
    branches: [ $default-branch ]
  pull_request:
    branches: [ $default-branch ]

env: 
    docker_user: ${{vars.MY_DOCKER_USERNAME}}
    docker_password: ${{secrets.MY_DOCKER_PASSWORD}}
    # ACR
    AZ_CONTAINER_REGISTRY: ${{ fromJson(vars.JSON).AZ_CONTAINER_REGISTRY }}
    AZ_CONTAINER_NAME: ${{ fromJson(vars.JSON).AZ_CONTAINER_NAME }}
    #HELM repo
    HELM_TEMPLATE_REPO: ${{ fromJson(vars.JSON).HELM_TEMPLATE_REPO }}
    HELM_TEMPLATE_BRANCH: ${{ fromJson(vars.JSON).HELM_TEMPLATE_BRANCH }}
    # Azure Blob Stotage 
    BLOB_STORAGE_ACC: ${{ fromJson(vars.JSON).BLOB_STORAGE_ACC }}
    BLOB_CONTAINER_NAME: ${{ fromJson(vars.JSON).BLOB_CONTAINER_NAME }}

jobs:
  env_workflow:
    runs-on: ubuntu-latest
    name: Setup Output Env
    outputs: 
      user: ${{env.docker_user}}
      pass: ${{env.docker_password}}

      AZ_CONTAINER_REGISTRY: ${{env.AZ_CONTAINER_REGISTRY}}
      AZ_CONTAINER_NAME: ${{env.AZ_CONTAINER_NAME}}
      HELM_TEMPLATE_REPO: ${{env.HELM_TEMPLATE_REPO}}
      HELM_TEMPLATE_BRANCH: ${{env.HELM_TEMPLATE_BRANCH}}
      BLOB_STORAGE_ACC: ${{env.BLOB_STORAGE_ACC}}
      BLOB_CONTAINER_NAME: ${{env.BLOB_CONTAINER_NAME}}
    steps:
      - run: |
          echo "preparing output env"

  Build_Docker:
    needs: env_workflow
    name: "Build Docker to dockerhub"
    uses: brightza008/poc-github-workflow/.github/workflows/docker-build.yaml@workflow
    with:
      username: ${{ needs.env_workflow.outputs.user }}
      # username: ${{vars.MY_DOCKER_USERNAME}} 
    secrets:
      # token: ${{ needs.env_workflow.outputs.pass }}
      token: ${{secrets.MY_DOCKER_PASSWORD}} 
 
  Setup_AZ_Reources:
    name: "Calling workflow Azure login"
    uses: brightza008/poc-github-workflow/.github/workflows/az-authen.yaml@workflow
    secrets:
      AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}

  Build_Docker_ACR:
    needs: env_workflow
    name: "Build Docker to ACR"
    uses: brightza008/poc-github-workflow/.github/workflows/docker-build-acr.yaml@workflow
    with:
      AZ_CONTAINER_REGISTRY: ${{needs.env_workflow.outputs.AZ_CONTAINER_REGISTRY}}
      AZ_CONTAINER_NAME: ${{needs.env_workflow.outputs.AZ_CONTAINER_NAME}}
    secrets: inherit # pass all secrets into reuse-workflow

  TEST_CALL_OUTPUT:
    runs-on: ubuntu-latest
    needs: Build_Docker_ACR
    steps:
      - run: |
          echo ${{ needs.Build_Docker_ACR.outputs.PACKAGE_VERSION }}
    
  Helm_Build_Chart: 
    needs: [env_workflow,Build_Docker_ACR]
    name: "Helm Build Chart to Blob storage"
    uses: brightza008/poc-github-workflow/.github/workflows/helm-build-chart.yaml@workflow
    with:
      HELM_TEMPLATE_REPO: ${{needs.env_workflow.outputs.HELM_TEMPLATE_REPO}}
      HELM_TEMPLATE_BRANCH: ${{needs.env_workflow.outputs.HELM_TEMPLATE_BRANCH}}
      AZURE_STORAGE_ACC_NAME: ${{needs.env_workflow.outputs.BLOB_STORAGE_ACC}}
      AZURE_CONTAINER_NAME: ${{needs.env_workflow.outputs.BLOB_CONTAINER_NAME}}
      APP_NAME: ${{github.event.repository.name}}
      APP_VERSION: ${{ needs.Build_Docker_ACR.outputs.PACKAGE_VERSION }} # use the output (app version) from docker-build-acr.yaml
    secrets: inherit # pass all secrets into reuse-workflow
 
  Deploy_helm:  ## now use Helm values form https://github.com/brightza008/poc-helmchart.git
    needs: [env_workflow,Helm_Build_Chart] 
    name: "Helm deploy to AKS"
    uses: brightza008/poc-github-workflow/.github/workflows/helm-aks.yaml@workflow
    with:
      APP_NAME: ${{github.event.repository.name}}
      APP_VERSION: ${{ needs.Build_Docker_ACR.outputs.PACKAGE_VERSION }}
      HELM_TEMPLATE_REPO: ${{needs.env_workflow.outputs.HELM_TEMPLATE_REPO}}
      HELM_TEMPLATE_BRANCH: ${{needs.env_workflow.outputs.HELM_TEMPLATE_BRANCH}}
      AZ_RESOURCE_GROUP: bright-rg
      AZ_AKS_NAME: bright-aks
    secrets: inherit 
        